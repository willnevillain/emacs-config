#+TITLE: Emacs Config
#+AUTHOR: peatsheep
#+OPTIONS: toc:nil num:nil

* Required external dependencies

For this configuration to work correctly, the following dependencies must be installed on your system.

- =ripgrep= for fast searching.
- =graphviz= for =org-roam= graph.
- =JetBrains Mono font=.

* SSL config

Allows for pulling from =https= package archives.

#+begin_src emacs-lisp
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src

* Add package repositories

#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

* Garbage collection tuning

Thanks to [[https://github.com/abrochard/emacs-config/blob/master/configuration.org#garbage-collection-tuning][abrochard config]].

#+begin_src emacs-lisp
  ;; When idle for 30sec run the GC no matter what.
  (defvar k-gc-timer
    (run-with-idle-timer 30 t (lambda () (garbage-collect))))

  ;; Set garbage collection threshold to 1GB.
  (setq gc-cons-threshold #x40000000)

  ;; Set garbage collection to 20% of heap
  (setq gc-cons-percentage 0.2)
#+end_src

* Automatic package installation via =use-package=

** Install =use-package= and dependencies

[[https://github.com/jwiegley/use-package][use-package]] is a macro that simplifies the syntax for installing and configuring packages.

[[https://github.com/myrjola/diminish.el][diminish]] hides minor-modes from the modeline. =use-package= has support for invoking =diminish= via the =:diminish= keyword.

#+begin_src emacs-lisp
  (mapc
   (lambda (package)
     (unless (package-installed-p package)
       (progn
         (package-refresh-contents)
         (package-install package))))
   '(use-package diminish))
#+end_src

** Trigger =use-package=

=use-package-always-ensure= set to =t= is equivalent to all =use-package= declaractions having the =:ensure= keyword set to =t=.
=:ensure= causes packages to be installed automatically if not already present on system.

#+begin_src emacs-lisp
  (require 'use-package)
  (require 'diminish)

  (setq use-package-always-ensure t)
#+end_src

* Install =better-defaults=

[[https://git.sr.ht/~technomancy/better-defaults][better-defaults]] provides a set of packages and configuration updates to add "better" defaults.
I've used this package for a bit and have grown accustomed to most of these defaults.

The main things I notably get from this are:
- Disable toolbar, menu bar and scroll bar
- =uniquify= library enabled and configured to add directory names to files if the names are not unique (default behavior is to append =<n>= to the end of file names)
- =show-paren-mode= enabled by default
- More extensive =apropros= searches
- =indent-tabs=mode= defaults to nil - spaces instead of tabs

Will maybe pull out these specific changes into dedicated config to avoid risk a new version of =better-defaults= changing some behavior I'm used to, but it should be fine.

#+begin_src emacs-lisp
  (use-package better-defaults)
#+end_src

* UI / UX

** Startup UI / UX behavior

Inhibit startup message and have scratch buffer empty by default.

#+begin_src emacs-lisp
  (setq initial-scratch-message nil)
  (setq inhibit-startup-message t)
#+end_src

** General UI / UX tweaks

Do not make an audible noise when attempting to do something invalid.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Ask for confirmation before quitting - remove pain of accidental =C-x C-c= fat fingers.

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

Accept =y= and =n= in place of =yes= and =no= respectively.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Auto-indent on =RET= in addition to usual =C-j=.

#+begin_src emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src

** Theme

=dracula= as the theme, but via the =doom-themes= package.

#+begin_src emacs-lisp
  ;; (use-package dracula-theme
  ;;   :config
  ;;   (setq dracula-enlarge-headings nil)) ;; Don't change heading/title font sizes

  ;; (load-theme 'dracula t)

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
#+end_src

#+RESULTS:

** Font

FiraCode as font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 128)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 128)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Input Sans" :height 128 :weight 'regular)
#+end_src

** Custom modeline

Using =doom-modeline= because it's minimal yet excellent out of the box. With =all-the-icons= support!

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* Configure =ivy=

** Install =ivy=, rebind common functions, fuzzy match everywhere

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("M-y" . counsel-yank-pop)
           ("C-x b" . ivy-switch-buffer)
           ("C-x C-b" . ivy-switch-buffer) ;; This key stroke is typically done in error trying to do C-x b
           ("C-x C-f" . counsel-find-file)
           ("C-c C-r" . ivy-resume)))

  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t
          ivy-height 15
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                  (t . ivy--regex-plus))))

  (use-package counsel-projectile
    :diminish counsel-projectile-mode
    :config
    (counsel-projectile-mode t)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Chinese

All of this copied near-verbatim (besides paths) from Josh Moller-Mara.
Notably I've commented out anything pertaining to =cangjie= as it's not currently relevant to me.
If this is relevant to you, see Josh's dotfiles.
See Josh's full dotfiles [[https://github.com/mm--/dot-emacs][here]] as well as the talk on using Emacs to learn Chinese [[https://www.youtube.com/watch?v=uraPXeLfWcM][here]].

#+begin_src emacs-lisp
  ;; Various utilities to get Cangjie codes, pinyin pronunciation, and
  ;; definitions from a Chinese dictionary file
  ;; - Josh Moller-Mara

  ;; (defun josh/chinese-cangjie-code (str)
  ;;   "Get the cangjie code for a string"
  ;;   (interactive)
  ;;   (with-temp-buffer
  ;;     (set-input-method "Cangjie5")
  ;;     (mapconcat (lambda (x)
  ;;                  (upcase (mapconcat 'identity (quail-find-key (string-to-char x)) "/")))
  ;;                (split-string str "" t)
  ;;                " ")))

  ;; (defun josh/chinese-cangjie-codes (words)
  ;;   "Get the cangjie codes for traditional + simplified"
  ;;   (if (listp words)
  ;;       (format "%s\n[%s]" (josh/chinese-cangjie-code (cdr words))
  ;;               (josh/chinese-cangjie-code (car words)))
  ;;     (josh/chinese-cangjie-code words)))

  (defvar josh/chinese-dictionary-path
    (concat org-directory "/chinese/cedict_ts.u8")
    "Where we store the Chinese dictionary cedict_ts.u8")

  (defun josh/chinese-prompt ()
    "Prompt for a character, return it"
    (setq josh/chinese-word (read-from-minibuffer "Word/Phrase: ")))


  (defun josh/chinese-dict-find (phrase)
    "Find a chinese word or phrase in the dictionary"
    (with-temp-buffer
      (insert-file-contents josh/chinese-dictionary-path)
      (let (definitions)
        (while (re-search-forward (concat "^[^][]*\\b" phrase "\\b.*?$") nil t)
          (push (buffer-substring (match-beginning 0)
                                  (match-end 0))
                definitions))
        (setq josh/chinese-word-dict
             (if (equal (length definitions) 1)
                 (car definitions)
               (ivy-read "Pick a definition: "
                               definitions
                               :nomark t))))))

  (defun josh/chinese-get-pronunciation (dictentry)
    "Get a pronunciation from a dictionary entry."
    (let ((pronunciation (save-match-data
                           (and (string-match "\\[\\(.*?\\)\\]" dictentry)
                                (match-string 1 dictentry)))))
      (with-temp-buffer
        (set-input-method "chinese-sisheng")
        (mapconcat (lambda (x)
                     (let ((translation (quail-map-definition
                                          (quail-lookup-key x))))
                            (or (if (listp translation)
                                          (elt (cdr translation) 0)
                                  (char-to-string translation)) ;sisheng doesn't have 5th tone
                                (substring x 0 -1))))
                   (split-string pronunciation " " t)
                   " "))))

  (defun josh/chinese-get-definition (dictentry)
    "Get a definition from a dictionary entry."
    (save-match-data
      (and (string-match "/\\(.*?\\)$" dictentry)
           (mapconcat 'identity
                      (split-string (match-string 1 dictentry) "/" t)
                      "\n"))))

  (defun josh/chinese-get-word (dictentry)
    "Return either the character, or a list of traditional and simplified."
    (let* ((words (save-match-data
                    (and (string-match "^\\(.+?\\) \\(.+?\\)\\b" dictentry)
                         (cons (match-string 1 dictentry)
                               (match-string 2 dictentry)))))
           (traditional (car words))
           (simplified (cdr words)))
      (if (equal traditional simplified)
          (setq josh/chinese-words traditional)
        (setq josh/chinese-words words)
        (format "%s [%s]" simplified traditional))))

  (defun josh/chinese-def-at-point (&optional arg)
    "Get the definition of a character at the point and display in
  the minibuffer. With an argument, insert the definition into the
  buffer."
    (interactive "P")
    (let ((phrase (if (use-region-p)
                      (buffer-substring-no-properties (region-beginning) (region-end))
                    (string (char-after))))
          definitions)
      (with-temp-buffer
        (insert-file-contents josh/chinese-dictionary-path)
        (while (re-search-forward (concat "^[^][]*\\b" phrase "\\b.*?$") nil t)
            (push (buffer-substring (match-beginning 0)
                                    (match-end 0))
                  definitions)))
      (let ((defs (mapconcat 'identity definitions "\n")))
            (if arg
                (insert defs)
              (message defs)))))

  (defvar josh/chinese-decomposition-path
    (concat org-directory "/chinese/cjk-decomp-0.4.0.txt")
    "Where we store the Chinese character decomposition data")

  (defun josh/chinese-decomposition-find (phrase)
    "Find a chinese word or phrase in the dictionary"
    (defun str-decomp (strnum)
      (if (and strnum (= (string-to-number strnum) 0))
          strnum
        (josh/chinese-decomposition-find strnum)))
    (with-temp-buffer
      (insert-file-contents josh/chinese-decomposition-path)
      (let (definitions)
        (when (re-search-forward (concat "^" phrase ":.*?$") nil t)
          (let ((decomp (buffer-substring (match-beginning 0)
                                          (match-end 0))))
            (save-match-data
              (string-match "^\\(.*?\\):\\(.*?\\)(\\(.*?\\))$" decomp)
              (let* ((decomptype (match-string 2 decomp))
                     (constituents (split-string (match-string 3 decomp) "[,()]")))
                (cons decomptype (mapcar 'str-decomp constituents)))))))))

  (defun josh/chinese-decomposition-at-point ()
    "Get the decomposition of a character at the point and insert it."
    (interactive)
    (defun listtostr (x)
      (if (listp x)
          (mapconcat 'listtostr x "")
        x))
    (let ((phrase (string (char-after))))
      (insert (listtostr (josh/chinese-decomposition-find phrase)))))
#+end_src

* Configure =org-mode=

[[https://orgmode.org/][org-mode]] is a major mode that provides a plain text markup language - that doesn't sound that special in essence, but the ecosystem around org-mode is out of control.

You can manage novel planning, spreadsheets, personal and project TODO management, write research papers...whatever you want basically, and org-mode has a way to make it easier.

I use org-mode currently for daily task tracking and project management. I use =Todoist= for some critical timed / repeating tasks (e.g. =pay your credit card bills=).

** Core configuration

#+begin_src emacs-lisp
  (use-package org

    :config
    (setq org-directory "~/Dropbox/org"
           org-log-repeat "time"
           org-deadline-warning-days 5)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)

    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture)
     :map org-mode-map
     ("C-c C-q" . counsel-org-tag))

    :hook (org-mode . org-indent-mode))

  (defun willnevillain/org-find-file ()
    "Quickly open any org file in org-directory (non-recursive)."
    (interactive)
    (find-file (expand-file-name (ivy-read "Select file: " (directory-files org-directory nil "\.org$")) org-directory)))

  (global-set-key (kbd "C-c M-o") 'willnevillain/org-find-file)
#+end_src

** Configure agenda

Likewise, agenda files will live in Dropbox.

#+begin_src emacs-lisp
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-files `(,org-directory)
        org-agenda-custom-commands '(("p" tags "PROJECT" nil)
                                     ("d" "Dashboard" ((agenda "" ((org-deadline-warning-days 7)))
                                                       (tags "+PROJECT+ACTIVE" ((org-agenda-overriding-header "Active Projects")))
                                                       (tags "+PROJECT-ACTIVE+LEVEL=1|+PROJECT-ACIVE+LEVEL=2" ((org-agenda-overriding-header "Inactive Projects")))))))

  (defun willnevillain/set-org-agenda-files ()
    "Utility function to refresh org-agenda-files recursively in org-directory if any new files have been added."
    (interactive)
    (setq org-agenda-files `(,org-directory)))
#+end_src

** Configure todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "|" "DONE(d!)")))
#+end_src

** Configure additional export options

[[https://github.com/larstvei/ox-gfm][ox-gfm]] adds support for export org files to GitHub Flavored Markdown.

#+begin_src emacs-lisp
  (use-package ox-gfm)
#+end_src

** Configure =org-babel= languages

[[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]] allows executing src blocks in org files.

We define the languages that we want =org-babel= to execute.

#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)))
#+end_src

** Configure capture templates

For those not in the know, if you want to call a function when declaring a list with ='()=, use =`()= and then preface your function call with =,=.

#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("i" "Inbox Item" entry (file ,(expand-file-name "inbox.org" org-directory))
           "* %?\nCaptured: %U\n")
          ("c" "Chinese Word" entry
           (file+headline ,(expand-file-name "chinese.org" org-directory) "Words")
           ,(concat "* [%(josh/chinese-prompt)] :drill:\n"
                    "Added: %U\n"
                    "Definition:\n"
                    "%(josh/chinese-get-definition (josh/chinese-dict-find josh/chinese-word))\n"
                    "** Characters\n"
                    "%(josh/chinese-get-word josh/chinese-word-dict)\n"
                    "** Pronunciation\n"
                    "%(josh/chinese-get-pronunciation josh/chinese-word-dict)\n"))))
#+end_src

** Configure org-refile

This configuration is mainly to allow refiling subtrees to the root of a new file - see [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][this blog post for details]].

#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

** Configure org-drill

#+begin_src emacs-lisp
  (use-package org-drill
    :config (progn
              (add-to-list 'org-modules 'org-drill)
              (setq org-drill-add-random-noise-to-intervals-p t)
              (setq org-drill-hint-separator "||")
              (setq org-drill-learn-fraction 0.25)
              (setq org-drill--lapse-very-overdue-entries-p t)))
#+end_src

* Configure =org-roam=

#+begin_src emacs-lisp
  (use-package org-roam
    :diminish org-roam-mode
    :commands org-roam-mode
    :config
    (progn
      (setq org-roam-directory (concat org-directory "/roam")
            org-roam-dailies-directory "daily/"
            org-roam-dailies-capture-templates `(("d" "default" entry
                                                  #'org-roam-capture--get-point
                                                  ,(concat
                                                    "* Work Focuses\n"
                                                    "* Journal\n"
                                                    "** Morning\n"
                                                    "** Evening\n"
                                                    "* Checklists\n"
                                                    "** Morning\n"
                                                    "- [ ] Check notebook, Todoist =Inbox= and =inbox.org= for incoming items\n"
                                                    "- [ ] Check Todoist =Today= and yesterday's daily note for overflow items\n"
                                                    "- [ ] Ensure Todoist and Emacs task states in sync\n"
                                                    "- [ ] Sort and prioritize new items in =tasks.org=\n"
                                                    "- [ ] Add personal and work 'must dos' to docket, and work focuses if applicable\n"
                                                    "- [ ] Reflect on 'want to dos' and projects\n"
                                                    "  - [ ] Add achievables to docket\n"
                                                    "  - [ ] Reflect on important daily habits and note when you will do them\n"
                                                    "- [ ] Reflect on what is slated for today. Is this reasonable? Prune as necessary.\n"
                                                    "- [ ] Journal thoughts, ambitions, goals\n"
                                                    "** Evening\n"
                                                    "- [ ] Check Todoist =Inbox= and inbox.org for incoming items\n"
                                                    "- [ ] Reflect on incomplete items. What should be deprioritized, what should be overflowed?\n"
                                                    "- [ ] Ensure Todoist and Emacs task states in sync\n"
                                                    "- [ ] Sort and prioritize new items\n"
                                                    "- [ ] Reflect on 'want to dos' and projects\n"
                                                    "  - [ ] Did achievables get completed / will be completed before bed? Reflect on why.\n"
                                                    "  - [ ] Did you do the important daily habits / will you do them before bed? Reflect on why.\n"
                                                    "- [ ] Journal on how the day went and anything else\n")
                                                  :file-name "daily/%<%Y-%m-%d>"
                                                  :head "#+title: %<%Y-%m-%d>\n\n"))))

    :bind ("C-c M-p" . org-roam-dailies-find-previous-note))

  (org-roam-mode t)

  (defun willnevillain/create-or-find-org-roam-daily-note ()
    "Find the org-roam daily note for today, or create it if it does not exist."
    (interactive)
    (if (file-exists-p (concat org-roam-directory "/" org-roam-dailies-directory (shell-command-to-string "echo -n $(date +%Y-%m-%d)") ".org"))
        (org-roam-dailies-find-today)
      (org-roam-dailies-capture-today)))
  (global-set-key (kbd "C-c M-t") 'willnevillain/create-or-find-org-roam-daily-note)
#+end_src

* Configure =projectile=

[[https://github.com/bbatsov/projectile][projectile]] is a very powerful library for interacting with multiple projects.
It provides features and functions that operate on the project level, such as jumping to a file in a project, jump to file at point in project, search in project, etc.

** Install =projectile= and core configuration

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    (setq projectile-project-search-path '("~/code")) ;; Specify dir(s) to search for projects
    (projectile-discover-projects-in-search-path) ;; Trigger project discovery
    (setq projectile-enable-caching t) ;; Cache search results
    (add-to-list 'projectile-globally-ignored-directories "node_modules")) ;; Never search in
#+end_src

* Cofigure =magit=

[[https://github.com/magit/magit][magit]] is a Git porcelain for Emacs, and honestly one of the killer apps of Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src

[[https://github.com/alphapapa/magit-todos][magit-todos]] for visualizing =TODO= items marked across the source.

#+begin_src emacs-lisp
  (use-package magit-todos
    :diminish magit-todos-mode
    :config (magit-todos-mode t))
#+end_src

* Programming environment

Anything related to a specific programming language, or programming major mode adjacent, lives here.

** Configure =flycheck=

[[https://github.com/flycheck/flycheck][flycheck]] provides on the fly syntax checking; it supports [[https://www.flycheck.org/en/latest/languages.html][many languages and checkers]].

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+end_src

** Configure =company=

[[https://company-mode.github.io/][company]] is an in-buffer text completion framework; put more simply, when you're typing something, company will create a dropdown of possible options for what you're typing.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (global-company-mode)
    (setq company-idle-delay 0.2 ;; show candidates 0.3 sec after idle from typing
          company-minimum-prefix-length 1 ;; show candidates as early as 1 character
          company-selection-wrap-around t ;; if you scroll past last/first candidate, wrap around
          global-company-modes '(not org-mode))) ;; disable company for modes
#+end_src

[[https://github.com/company-mode/company-quickhelp][company-quickhelp]] displays a pop-up when idling on a company candidate with documentation on the candidate.

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :config
    (setq company-quickhelp-delay 0.5)
    (company-quickhelp-mode))
#+end_src

** Configure support for TypeScript + ecosystem

Currently I only do Backend Node.js TypeScript programming - as a result there is slim support for anything pertaining to the web or vanilla JS at this time.

Configuration assumes that you have =eslint= and =prettier= installed for projects, either globally or project locally should be fine.

*** Install and configure =lsp-mode=

Using =lsp-mode= for TypeScript - this is in flux at the moment.

#+begin_src emacs-lisp
  (use-package typescript-mode)
  (setq-default typescript-indent-level 2)

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")

    :hook
    (typescript-mode . lsp)
    (javascript-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)

    :config
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-eslint-validate [javascript typescript])
    (setq lsp-eslint-package-manager "yarn")
    (setq lsp-eslint-format nil)
    (setq lsp-eslint-trace-server t)
    (setq lsp-log-io t)

    :commands lsp)

  (use-package lsp-ui
    :config (setq lsp-ui-sideline-show-code-actions nil)
    :commands lsp-ui-mode)

  ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))

  (advice-add 'lsp-execute-code-action :after (lambda (r) (call-interactively 'lsp)))
#+end_src

*** Node version management with =nvm=

Load correct nvm version based off of =.nvmrc=.

#+begin_src emacs-lisp
  (use-package nvm
    :hook (typescript-mode . nvm-use-for))
#+end_src

*** Add node_modules =.bin= folder to =exec-path=

[[https://github.com/codesuki/add-node-modules-path][add-node-modules-path]] provides a function that searches current file parent directories for a =node_modules/.bin/= folder.

This allows using project based installations of tools like =eslint= and =prettier=, which is my preference for controlling versions.

#+begin_src emacs-lisp
  (use-package add-node-modules-path
    :hook (typescript-mode . add-node-modules-path)
    :hook (json-mode . add-node-modules-path)
    :hook (yaml-mode . add-node-modules-path))
#+end_src

*** Install and configure =prettier-js=

[[https://github.com/prettier/prettier-emacs][prettier-js]] provides formatting support via the [[https://prettier.io/][prettier]] code formatter.

=tide= offers formatting support that aligns with TypeScript standards, but I work with a few codebases that prefer local =prettier= configs.

#+begin_src emacs-lisp
  (use-package prettier-js
    :hook (typescript-mode . prettier-js-mode)
    :hook (json-mode . prettier-js-mode)
    :hook (yaml-mode . prettier-js-mode))
#+end_src

*** Indium

Debugger - I don't know how to use this yet.

#+begin_src emacs-lisp
  (use-package indium)
#+end_src


** Configure development adjacent major modes

*** Install =yaml-mode=

[[https://github.com/yoshiki/yaml-mode][yaml-mode]] provides YAML file editing support.

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

*** Install =markdown-mode=

[[https://github.com/jrblevin/markdown-mode][markdown-mode]] provides Markdown editing support.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)))
#+end_src

*** Install =json-mode=

[[https://github.com/joshwnj/json-mode][json-mode]] provides JSON file editing support.

#+begin_src emacs-lisp
  (use-package json-mode
    :hook (json-mode . (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2))))
#+end_src

*** Install =dockerfile-mode=

[[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] provides Dockerfile editing support (and image building as well).
Somewhat of a surprise to me, this is maintained by Spotify.

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

** Configure programming related UI packages

*** Install =git-gutter=

[[https://github.com/emacsorphanage/git-gutter][git-gutter]] provides visual indicators in the left gutter of a buffer of git changes.

#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :config (global-git-gutter-mode 1))
#+end_src

* Infrastructure and application management

Anything related to connecting to, declaring configuration for or otherwise managing live infrastructure or applications.

** Configure =kubel=

[[https://github.com/abrochard/kubel][kubel]] allows controlling Kubernetes with limited permissions through Emacs.

The [[https://github.com/abrochard][author]] gave an interesting talk about how the extension was born and built, which I encourage you to watch [[https://www.youtube.com/watch?v=w3krYEeqnyk][here]].

#+begin_src emacs-lisp
  (use-package kubel)
#+end_src

* Configure =restclient-mode=

#+begin_src emacs-lisp :output silent
  (use-package restclient
    :mode (("\\.http\\'" . restclient-mode)))
#+end_src

* Configure =eshell=

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]] is a shell-like command interpreter implemented entirely in Emacs Lisp.

=eshell= is an interesting beast that I won't say I've come close to taming.

Recommended reading / viewing to demystify =eshell=:
- [[https://masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Emacs article "Mastering Eshell"]]
- [[https://www.youtube.com/watch?v=RhYNu6i_uY4][Howard Abrams London Emacs Meetup talk "Introduction to EShell"]]

** Package configuration

#+begin_src emacs-lisp
  (use-package eshell
    :config
    (setq eshell-scroll-to-bottom-on-input 'all ;; Scroll to bottom of buffer when entering input
          eshell-error-if-no-glob t ;; Error if glob pattern does not match
          eshell-hist-ignoredups t ;; ???, but a lot of people have it
          eshell-save-history-on-exit t ;; Save history of eshell process on exist
          eshell-prefer-lisp-functions nil ;; Prefer external commands to Lisp functions
          eshell-destroy-buffer-when-process-dies t) ;; When eshell process exists, destroy buffer
    (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map (kbd "C-r") 'counsel-esh-history))))

#+end_src

** Utility functions

Defined functions prefaced with =eshell/= should be invokable using everything after the =/= in eshell. 

#+begin_src emacs-lisp
  (defun eshell/clear ()
    "Clear eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun eshell/close ()
    "Close eshell window."
    (delete-window))
#+end_src

=eshell= related interactive functions defined here.

#+begin_src emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
    (interactive)
    (let* ((height (/ (window-total-height) 4)))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")))

  (global-set-key (kbd "C-!") 'eshell-here)
#+end_src

Miscellaneous non-interactive and non-=eshell/= utility functions defined below.

#+begin_src emacs-lisp
  (defun eshell-pop--kill-and-delete-window ()
    "Used on eshell exit hook, will delete the window if not the only one in the frame"
    (unless (one-window-p)
      (delete-window)))

  (add-hook 'eshell-exit-hook 'eshell-pop--kill-and-delete-window)
#+end_src

** Visual command and subcommand definitions

=eshell= is not a fully functioning terminal, and cannot handle certain visual commands.

#+begin_src emacs-lisp
  (setq eshell-visual-command '("htop" "top" "less" "more" "screen" "node" "ssh"))
  (setq eshell-visual-subcommands '("git" "log" "diff" "show" "ssh" "yarn" "npm" "docker" "docker-compose"))
#+end_src

Related: set Unix Pager to be the =cat= command.

#+begin_src emacs-lisp
  (setenv "PAGER" "cat")
#+end_src

* Configure =yasnippet=

[[https://github.com/joaotavora/yasnippet][yasnippet]] is a template and expansion system for Emacs.

Snippets from the [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets community library]] are loaded alongside my own defined snippets.

My snippets are located at =~/.emacs.d/snippets=, community library at =~/.emacs.d/yasnippet-snippets=.

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
    (yas-global-mode)
    (global-set-key (kbd "M-/") 'company-yasnippet))
#+end_src

* Configure blogging tool(s)

[[https://github.com/masasam/emacs-easy-hugo][easy-hugo]] is a package that makes it easier to work with the [[https://gohugo.io/][hugo]] static site generator.

#+begin_src emacs-lisp
  (use-package easy-hugo
    :init
    (setq easy-hugo-basedir "~/code/blog/")
    (setq easy-hugo-url "https://willnevillain.github.io")
    (setq easy-hugo-postdir "content/blog")
    (setq easy-hugo-default-ext ".org"))
#+end_src

* Global utility functions

Any utility functions that are used at a global level go here.

** Jump to this configuration file

#+begin_src emacs-lisp
  (defun willnevillain/goto-configuration ()
    "Go to org configuration file."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c M-c") 'willnevillain/goto-configuration)
#+end_src

** Toggle font size for streaming mode

This function is pretty wild and probably horrible but it works - used for toggling font size when doing coding streams.

#+begin_src emacs-lisp
  (defun willnevillain/toggle-stream-fontsize ()
    "Toggle the font size between default and large for streaming"
    (interactive)
     (if (string= (cdar default-frame-alist) "JetBrains Mono-24")
         (progn
           (setcar default-frame-alist '(font . "JetBrains Mono-14"))
           (set-face-attribute 'default nil :font "JetBrains Mono-14"))
       (progn
         (setcar default-frame-alist '(font . "JetBrains Mono-24"))
         (set-face-attribute 'default nil :font "JetBrains Mono-24"))))
#+end_src

* Miscellaney

Configuration that doesn't really fit elsewhere or deserve a top level heading go here.

** Configure =helpful= for better Emacs docs

[[https://github.com/Wilfred/helpful][helpful]] provides much more context and detail in the help buffer.

We rebind all the command help keybinds to their =helpful= equivalent.

#+begin_src emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h F" . helpful-function)
           ("C-h C" . helpful-command)))
#+end_src

** Configure =exec-path-from-shell= (OS X)

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] copies specified environment variables from your shell to Emacs.

On OS X in particular, Emacs launched as a GUI does not inherit all the shell env vars.

#+begin_src emacs-lisp
  (setq exec-path-from-shell-arguments nil) ;; Suppress default arg to open interactive shell

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src 

** Configure backups to go into one folder

I dislike polluting the file tree with Emacs backups - I put them all in =~/.emacs.d/backups=.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

** Configure =flyspell= spell checking

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][flyspell]] (built in) will highlight misspelled words by way of an underlying spell checking program (on OS X it is probably =ispell=).

I only want global spell checking in =org-mode= buffers, and for programming mode buffers enable =flyspell-prog-mode= which only spell checks comments and strings.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src

** Configure diminished minor modes

There are a few minor modes not specifically configured in this file that I like to diminish.

#+begin_src emacs-lisp
  (diminish 'abbrev-mode)
  (diminish 'auto-revert-mode)
  (diminish 'eldoc-mode)
  (diminish 'flyspell-mode)
#+end_src

* Configure and load custom file

By default, Emacs places anything customized via =customize= at the bottom of =init.el=.

Prefer to place all this cruft in a specific file.

#+begin_src emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

